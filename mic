#!/bin/sh

# =====================================================================================
#                              Material Iconic Commands
# =====================================================================================
#
# Description:
#     A command that allows you to change the icons of files and
#     directories using the VSCode Material Icon Theme icon theme.
#     You can also set your own icons.
#     The icon data is used from "vscode-material-icon-theme".
#     
#     Marketplace:
#         https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme
#
# Usage:
#     $ mic [options] <command> [<arguments>]
#
# Commands:
#     file <file-name[@<type>]>:
#             Change the icon of the specified file
#     dir <directory-name[@<type>]>:
#             Change the icon of the specified directory
#     make <type-name> <icon-path | icon-url>:
#             Make your own file icon
#     conv <directory/file-name>@<type>:
#             Converte file or directory icon
#     replace <directory-name>:
#             Replaces all files and directories, 
#             including the specified directory, 
#             with the appropriate icon from the extension or name.
#     
# Options:
#     -a, --all:
#             Can be used with file, dir and make commands
#     -l, --list <f/d>:
#             Show available icons
#     -h, --help:
#             Show usage
#
# Note:
#     If brew and npm are not installed, they will be installed automatically.
#     The external commands used in this process are also installed at the same time.
#     You may also be asked to enter a password to change permissions.
#
# Example:
#     $ mic file command@sh
#     $ mic dir fundamentals_of_java@java
#     $ mic conv foo@tmp
#     $ mic make your-service-name your-service-log.svg
#     $ mic make gopher https://raw.githubusercontent.com/devicons/devicon/master/icons/go/go-original.svg
#     $ mic -l f
#     $ mic -l d
#     $ mic -h
#
# TODO:
#     - [x] dir
#     - [x] file
#     - [ ] make
#     - [x] conv
#     - [ ] replace
#     - [ ] -a, --all
#     - [x] -l, --list
#     - [x] -h, --help

TOP_DIR=$(cd $(dirname $0);pwd)
DATA_DIR="$TOP_DIR/data"
IMAGES_DIR="$TOP_DIR/images"
ICONS_DIR="$TOP_DIR/icons"

main='
BEGIN {
    FS = ":";
}

function all_replacer(before, after, data) {
    split(data, splited_data, before);
    splited_data_length = length(splited_data);

    for (i = 0; i < splited_data_length; i += 1) {
        sub(before, after, data);
    }
    return data;
}

{
    key = all_replacer("\"", "", $1);
    key = all_replacer("\n", "", key);
    key = all_replacer("\x20", "", key);
    key = all_replacer("\x20", "", key);
    key = all_replacer("\x20", "", key);
    key = all_replacer("\x20", "", key);

    if (target == key) {
        value = all_replacer("\"", "", $2);
        value = all_replacer(",", "", value);
        value = all_replacer(" ", "", value);
        print(value);
    }
}
'

help() {
    echo "\n\t\tmic: Material Icon Theme Icon Changer\n"
    echo "Usage:"
    echo "\tmic [options] <command> [<arguments>]\n"
    echo "Commands:"
    echo "\tfile <file-name[@<type>]>:"
    echo "\t\tChange the icon of the specified file"
    echo "\tdir <directory-name[@<type>]>:"
    echo "\t\tChange the icon of the specified directory"
    echo "\tmake <type-name> <icon-path | icon-url>:"
    echo "\t\tMake your own file icon"
    echo "\tconv <directory/file-name>@<type>:"
    echo "\t\tConverte file or directory icon"
    echo "\treplace <directory-name>:"
    echo "\t\tReplaces all files and directories, including the specified directory,"
    echo "\t\twith the appropriate icon from the extension or name.\n"
    echo "Options:"
    echo "\t-a, --all:"
    echo "\t\tCan be used with file, dir and make commands"
    echo "\t-l, --list:"
    echo "\t\tShow available icons"
    echo "\t-h, --help:"
    echo "\t\tShow usage\n"
}

while [ $# -gt 0 ]; do
    case $1 in
        -a|--all)
            all=true
            ;;
        -l|--list)
            type=$2

            if [ "$type" = "f" ]; then
                echo "Available file icons:"
                echo "======================"
                cat $DATA_DIR/fileIcons.txt | more
                echo
            elif [ "$type" = "d" ]; then
                echo "Available directory icons:"
                echo "==========================="
                cat $DATA_DIR/folderIcons.txt | more
                echo
            else
                echo "Unknown type: $type"
                echo "Available types: f, d"
                echo "Usage:"
                echo "\tmic -l <f/d>"
                echo "Example:"
                echo "\tmic -l f"
                echo
                exit 1
            fi
            ;;
        -h|--help)
            help
            exit 0
            ;;
        *)
            break
            ;;
    esac
    shift
done

case $1 in
    file)
        if [ $# -lt 2 ]; then
            echo "Error: file command requires a file name"
            exit 1
        fi

        file=$2
        if [[ "$file" == *@* ]]; then
            name=$(echo $file | cut -d '@' -f 1)
            type=$(echo $file | cut -d '@' -f 2)
            icon=$(cat $DATA_DIR/fileIcons.json | awk -v target="$type" "$main")
            if [ -z "$icon" ]; then
                touch ./$file
            else
                if [ ! -f $IMAGES_DIR/$icon.png ]; then
                    rsvg-convert -h 120 $ICONS_DIR/$icon.svg > $IMAGES_DIR/$icon.png
                fi
                touch ./$name && fileicon -q set ./$name $IMAGES_DIR/$icon.png
            fi
            exit 0
        else
            fileName=$(echo $file | awk -F . '{print $1}'| tr '[:upper:]' '[:lower:]')
            fileExtension=$(echo $file | awk -F . '{print $2}')
        fi

        if [ -z "$fileExtension" ]; then
            icon=$(cat $DATA_DIR/fileIcons.json | awk -v target="$fileName" "$main")
            if [ -z "$icon" ]; then
                touch ./$file
            else
                if [ ! -f $IMAGES_DIR/$icon.png ]; then
                    rsvg-convert -h 120 $ICONS_DIR/$icon.svg > $IMAGES_DIR/$icon.png
                fi
                touch ./$file && fileicon -q set ./$file $IMAGES_DIR/$icon.png
            fi
        else
            icon=$(cat $DATA_DIR/fileIcons.json | awk -v target="$fileName.$fileExtension" "$main")
            if [ -n "$icon" ]; then
                if [ ! -f $IMAGES_DIR/$icon.png ]; then
                    rsvg-convert -h 120 $ICONS_DIR/$icon.svg > $IMAGES_DIR/$icon.png
                fi
                touch ./$file && fileicon -q set ./$file $IMAGES_DIR/$icon.png
                exit 0
            fi

            icon=$(cat $DATA_DIR/fileIcons.json | awk -v target="$fileExtension" "$main")
            if [ -n "$icon" ]; then
                if [ ! -f $IMAGES_DIR/$icon.png ]; then
                    rsvg-convert -h 120 $ICONS_DIR/$icon.svg > $IMAGES_DIR/$icon.png
                fi
                touch ./$file && fileicon -q set ./$file $IMAGES_DIR/$icon.png
                exit 0
            fi
            touch ./$file
        fi
        ;;
    dir)
        if [ $# -lt 2 ]; then
            echo "Error: dir command requires a directory name"
            exit 1
        fi

        dir=$2
        if [[ "$dir" == *@* ]]; then
            type=$(echo $dir | cut -d '@' -f 2)
            name=$(echo $dir | cut -d '@' -f 1)
            icon=$(cat $DATA_DIR/folderIcons.json | awk -v target="$type" "$main")
        else
            name=$dir
            icon=$(cat $DATA_DIR/folderIcons.json | awk -v target="$dir" "$main")
        fi

        if [ -z $icon ]; then
            mkdir ./$dir
        else
            if [ ! -f $IMAGES_DIR/$icon.png ]; then
                rsvg-convert -h 120 $ICONS_DIR/$icon.svg > $IMAGES_DIR/$icon.png
            fi
            mkdir ./$name && fileicon -q set ./$name $IMAGES_DIR/$icon.png
        fi
        ;;
    make)
        if [ $# -lt 3 ]; then
            echo "Error: make command requires a type name and an icon path or url"
            exit 1
        fi

        type=$2
        icon=$3
        if [[ "$icon" == http* ]]; then
            curl -s -o $IMAGES_DIR $icon
        else
            rsvg-convert -h 120 $icon > $IMAGES_DIR/$type.png
        fi

        if [ -d $type ]; then
            echo "Error: type name already exists"
            exit 1
        fi
        if [ -f $ICONS_DIR/$type.svg ]; then
            echo "Error: type name already exists"
            exit 1
        fi
        if [ -f $IMAGES_DIR/$type.png ]; then
            echo "Error: type name already exists"
            exit 1
        fi
        if [[ "$icon" == *.svg ]]; then
            cp $icon $ICONS_DIR/$type.svg
        else
            wget -O $ICONS_DIR/$type.svg $icon
        fi
        if [ ! -f $IMAGES_DIR/$type.png ]; then
            rsvg-convert -h 120 $ICONS_DIR/$type.svg > $IMAGES_DIR/$type.png
        fi
        ;;
    conv)
        if [ $# -lt 2 ]; then
            echo "Error: conv command requires a directory/file name and a type"
            exit 1
        fi
        file=$2
        if [[ "$file" == *@* ]]; then
            type=$(echo $file | cut -d '@' -f 2)
            name=$(echo $file | cut -d '@' -f 1)
        else
            name=$file
        fi

        if [ -d "$name" ]; then
            icon=$(cat $DATA_DIR/folderIcons.json | awk -v target="$type" "$main")
        else
            icon=$(cat $DATA_DIR/fileIcons.json | awk -v target="$type" "$main")
        fi

        if [ -z $icon ]; then
            echo "Error: icon not found"
            exit 1
        fi
        if [ ! -f $IMAGES_DIR/$icon.png ]; then
            rsvg-convert -h 120 $ICONS_DIR/$icon.svg > $IMAGES_DIR/$icon.png
        fi
        fileicon -q set $name $IMAGES_DIR/$icon.png
        ;;
    replace)
        if [ $# -lt 2 ]; then
            echo "Error: replace command requires a directory name"
            exit 1
        fi
        dir=$2
        if [ ! -d $dir ]; then
            echo "Error: directory not found"
            exit 1
        fi
        find $dir -type f -exec bash -c '
            icon=$(cat $DATA_DIR/folderIcons.json | awk -v target="$(echo {} | cut -d "/" -f 2 | cut -d "." -f 1)" "$main")
            if [ -z $icon ]; then
                echo "Error: icon not found"
                exit 1
            fi
            if [ ! -f $IMAGES_DIR/$icon.png ]; then
                rsvg-convert -h 120 $ICONS_DIR/$icon.svg > $IMAGES_DIR/$icon.png
            fi
            if [ -d {} ]; then
                mv {} {}.bak
                mkdir {}
                cp $IMAGES_DIR/$icon.png {}
                mv {}.bak {}
            else
                cp $IMAGES_DIR/$icon.png {}
            fi
        ' \;
        ;;
    *)
        echo "Error: invalid command"
        exit 1
        ;;
esac
